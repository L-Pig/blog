import{_ as t,o as e,c as r,V as n}from"./chunks/framework.2956d6af.js";const _=JSON.parse('{"title":"MySQL 事务","description":"","frontmatter":{},"headers":[],"relativePath":"MySQL/mysql-transaction.md","filePath":"MySQL/mysql-transaction.md","lastUpdated":1685507338000}'),a={name:"MySQL/mysql-transaction.md"},l=n('<h1 id="mysql-事务" tabindex="-1">MySQL 事务 <a class="header-anchor" href="#mysql-事务" aria-label="Permalink to &quot;MySQL 事务&quot;">​</a></h1><h2 id="一、事务四大特性-acid" tabindex="-1">一、事务四大特性(ACID) <a class="header-anchor" href="#一、事务四大特性-acid" aria-label="Permalink to &quot;一、事务四大特性(ACID)&quot;">​</a></h2><ol><li><strong>原子性（Atomicity）</strong> ： 事务开始后所有操作，要么全部成功，要么全部失败，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体，就像化学中学过的原子，是物质构成的基本单位。</li><li><strong>一致性（Consistency）</strong> ：一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</li><li><strong>隔离性（Isolation）</strong> :隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</li><li><strong>持久性（Durability）</strong> :持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</li></ol><h2 id="二、事务并发问题" tabindex="-1">二、事务并发问题 <a class="header-anchor" href="#二、事务并发问题" aria-label="Permalink to &quot;二、事务并发问题&quot;">​</a></h2><ol><li><strong>脏读</strong> ： 在一个事务处理过程里读取了另一个未提交的事务中的数据。</li><li><strong>不可重复读</strong> : 是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。</li><li><strong>幻读</strong> : 第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入或删除一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。</li></ol><h2 id="三、事务的四种隔离级别" tabindex="-1">三、事务的四种隔离级别 <a class="header-anchor" href="#三、事务的四种隔离级别" aria-label="Permalink to &quot;三、事务的四种隔离级别&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">事务隔离级别</th><th style="text-align:center;">脏读</th><th style="text-align:center;">不可重复读</th><th style="text-align:center;">幻读</th></tr></thead><tbody><tr><td style="text-align:center;">读未提交（read-uncommitted）</td><td style="text-align:center;">是</td><td style="text-align:center;">是</td><td style="text-align:center;">是</td></tr><tr><td style="text-align:center;">读已提交 （read-committed）</td><td style="text-align:center;">否</td><td style="text-align:center;">是</td><td style="text-align:center;">是</td></tr><tr><td style="text-align:center;">可重复读（repeatable-read）</td><td style="text-align:center;">否</td><td style="text-align:center;">否</td><td style="text-align:center;">是</td></tr><tr><td style="text-align:center;">串行化（serializable）</td><td style="text-align:center;">否</td><td style="text-align:center;">否</td><td style="text-align:center;">否</td></tr></tbody></table><blockquote><p><strong>MySQL</strong> 默认的是 <strong>可重复读（repeatable-read）</strong> ，而其它的数据库默认的是 <strong>读已提交 （read-committed）</strong></p></blockquote><h2 id="四、事务的七大传播机制" tabindex="-1">四、事务的七大传播机制 <a class="header-anchor" href="#四、事务的七大传播机制" aria-label="Permalink to &quot;四、事务的七大传播机制&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">PROPAGATION_REQUIRED</td><td style="text-align:center;">如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。</td></tr><tr><td style="text-align:center;">PROPAGATION_SUPPORTS</td><td style="text-align:center;">支持当前事务，如果当前没有事务，就以非事务方式执行。</td></tr><tr><td style="text-align:center;">PROPAGATION_MANDATORY</td><td style="text-align:center;">使用当前的事务，如果当前没有事务，就抛出异常。</td></tr><tr><td style="text-align:center;">PROPAGATION_REQUIRES_NEW</td><td style="text-align:center;">新建事务，如果当前存在事务，把当前事务挂起。</td></tr><tr><td style="text-align:center;">PROPAGATION_NOT_SUPPORTED</td><td style="text-align:center;">以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td style="text-align:center;">PROPAGATION_NEVER</td><td style="text-align:center;">以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td style="text-align:center;">PROPAGATION_NESTED</td><td style="text-align:center;">如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与<strong>PROPAGATION_REQUIRED</strong>类似的操作。</td></tr></tbody></table><blockquote><p><strong>MySQL</strong> 默认的是 <strong>PROPAGATION_REQUIRED</strong></p></blockquote>',11),d=[l];function s(i,o,c,g,y,h){return e(),r("div",null,d)}const P=t(a,[["render",s]]);export{_ as __pageData,P as default};
