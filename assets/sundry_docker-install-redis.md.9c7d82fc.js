import{_ as e,o as d,c as o,V as r}from"./chunks/framework.2956d6af.js";const h=JSON.parse('{"title":"在Docker中安装Redis","description":"","frontmatter":{},"headers":[],"relativePath":"sundry/docker-install-redis.md","filePath":"sundry/docker-install-redis.md","lastUpdated":1685958622000}'),c={name:"sundry/docker-install-redis.md"},t=r('<h1 id="在docker中安装redis" tabindex="-1">在Docker中安装Redis <a class="header-anchor" href="#在docker中安装redis" aria-label="Permalink to &quot;在Docker中安装Redis&quot;">​</a></h1><h2 id="拉取docker仓库中的redis镜像" tabindex="-1">拉取Docker仓库中的Redis镜像 <a class="header-anchor" href="#拉取docker仓库中的redis镜像" aria-label="Permalink to &quot;拉取Docker仓库中的Redis镜像&quot;">​</a></h2><blockquote><p><code>docker pull redis&lt;:tag&gt;</code></p></blockquote><h2 id="使用拉取到的docker镜像创建容器" tabindex="-1">使用拉取到的Docker镜像创建容器 <a class="header-anchor" href="#使用拉取到的docker镜像创建容器" aria-label="Permalink to &quot;使用拉取到的Docker镜像创建容器&quot;">​</a></h2><blockquote><p><code>docker run --name redis-dev -p 6379:6380 -v /usr/local/redis/dev/conf/redis.conf:/etc/redis/redis.conf -v /usr/local/redis/dev/data:/data -d redis&lt;:tag&gt; redis-server /etc/redis/redis.conf --appendonly yes</code></p></blockquote><hr><blockquote><p>[<code>--name</code>]：给创建的容器命名<br> [<code>-p&lt;:ip:&gt;&lt;port:&gt;&lt;port&gt;</code>]：指定宿主机的ip和宿主机与容器的端口映射，ip不写就是映射所有接口地址，第一个端口不写就在启动时随机宿主机的端口，第二个端口不写就默认使用容器内部的程序所使用的端口<br> [<code>-v</code>]：数据卷，用户持久化保存容器内的数据、配置文件等<br> [<code>-d</code>]：表示在后台启动，不会占用当前终端<br> [<code>redis&lt;:tag&gt;</code>]：使用哪个镜像创建容器。如果 tag不写则寻找该镜像tag为lasted的镜像进行创建<br> [<code>redis-server /etc/redis/redis.conf</code>]：使用容器内路径为 <code>/etc/redis/redis.conf</code> 的配置文件<br> [<code>--appendonly yes</code>]：开启持久化</p></blockquote>',7),a=[t];function s(i,l,n,k,p,_){return d(),o("div",null,a)}const b=e(c,[["render",s]]);export{h as __pageData,b as default};
