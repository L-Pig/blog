import{_ as s,o as a,c as i,R as n,a4 as e}from"./chunks/framework.Bs_Q0j17.js";const u=JSON.parse('{"title":"SpringBoot打包后不能读取classpath下文件","description":"","frontmatter":{},"headers":[],"relativePath":"java/springboot-package.md","filePath":"java/springboot-package.md","lastUpdated":1703841519000}'),t={name:"java/springboot-package.md"},l=n('<h1 id="springboot打包后不能读取classpath下文件" tabindex="-1">SpringBoot打包后不能读取classpath下文件 <a class="header-anchor" href="#springboot打包后不能读取classpath下文件" aria-label="Permalink to &quot;SpringBoot打包后不能读取classpath下文件&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>  在做读取 SpringBoot 项目读取文件的时候(文件在 <code>resource/</code>目录下)，在本地IDEA无论使用 <code>Resource</code>类还是使用 <code>Classpathresource</code>类获取文件均无问题,但是在打成jar发布后 使用 <code>Resource</code> 类无法获取到文件,而使用 <code>Classpathresource</code>则无问题。 下面是报错信息</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>java.io.FileNotFoundException: G:\\Coding\\Java\\demo\\target\\file:\\G:\\Coding\\Java\\demo\\target\\demo-0.0.1-SNAPSHOT.jar!\\BOOT-INF\\classes!\\text.json (文件名、目录名或卷标语法不正确。)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="问题分析" tabindex="-1">问题分析 <a class="header-anchor" href="#问题分析" aria-label="Permalink to &quot;问题分析&quot;">​</a></h2><ul><li>通常来说, 我们在写SpringBoot程序的时候，程序运行所必须的资源文件我们会一起打包到jar包中, 那么我们如果要去读取这个资源文件就要去jar包的 <code>classes</code> (也就是 <code>classpath</code>) 中去读取。</li><li>当我们使用 <code>new DefaultResourceLoader().getResource(&quot;classpath:text.json&quot;)</code> 在本地读取的时候，资源文件是存在于真实文件系统里的一个文件 (<code>G:\\Coding\\Java\\demo\\src\\main\\resources\\text.json</code>)。</li><li>而在jar包中, 它不是一个真实文件系统的文件.为了能用统一的文件系统路径去表示jar内的文件, Java开创了 <code>!</code>这个符号.<code>!</code>表示这个文件是一个压缩包(zip)(jar 本身就是一个 zip), 之后的路径则为压缩包内的路径(压缩包内的路径不分运行平台, 统一为 Unix 路径)。 正常情况下的 <code>new DefaultResourceLoader().getResource(&quot;classpath:text.json&quot;)</code>操作, 会得到一个 jar包路径后面加上一个 <code>!</code>号然后再拼接上包内路径的一个路径。</li><li>Spring Boot 为了避免资源文件冲突(Java的打包规范忽略了资源文件的问题, 两个库的代码文件是可以合并的, 因为包名不同；但是资源文件都从jar的根目录开始编排, 如果重名将互相覆盖而导致打包后资源文件的丢失)而采用 fat-jar 的方式来打包程序。fat-jar 就是一种 nested jar, 所有的依赖库不会合并到用户代码上, 而是以jar包的形式存放在jar包内。一个典型的 Spring Boot 打完包的结构大概是这样的：</li></ul><p><img src="'+e+`" alt="图示"></p><ul><li><code>classes</code> 下面是开发者写的代码和资源文件</li><li><code>org/springframework/boot/loader</code> 是 Spring Boot 相关的 <code>Loader</code> 类和 <code>Launcher</code> 等类</li></ul><ol><li>jar的入口类其实是 Spring Boot Launcher,他会为每一个依赖创建一个 <code>ClassLoader</code>, 这样就可以让每个依赖自己读取自己的资源文件而互不冲突</li><li>而用户自己的类是从 <code>/BOOT-INF/classes</code>开始的, 用户自己的资源文件的根目录也在这里, 所以为了让用户能够正确读到自己的资源文件，加载用户代码的那个 <code>ClassLoader</code> 的 <code>classpath</code> 从这里开始。</li><li>fat-jar并不是 Java官方标准, 所以 Java 认为所有 classpath 都是从 jar 的根目录开始的.于是我们得到的文件路径, 将是 {用户代码根目录}!/{资源文件路径}而用户代码根目录本身就是在jar内的, 最终我们会得到这么一个路径 <code>jar:G:\\Coding\\Java\\demo\\target\\file:\\G:\\Coding\\Java\\demo\\target\\demo-0.0.1-SNAPSHOT.jar!\\BOOT-INF\\classes!\\text.json</code>(注意,有两个 <code>!</code>号)没错, <code>classes</code>文件夹被认为是一个压缩包了.所以我们将找不到这个文件。</li><li>如果读取资源文件的操作只在自己的代码发生, 那么只要不使用 <code>new DefaultResourceLoader().getResource(&quot;classpath:text.json&quot;)</code>而直接获取流就可以避免这个问题。</li></ol><h2 id="解决办法" tabindex="-1">解决办法 <a class="header-anchor" href="#解决办法" aria-label="Permalink to &quot;解决办法&quot;">​</a></h2><p><strong>使用 <code>ClassPathResource</code>读取资源文件即可</strong> ，下面是示例代码：</p><div class="language-Java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.codezf.util;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.core.io.ClassPathResource;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.stereotype.Component;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javax.annotation.PostConstruct;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.io.InputStream;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@author</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> Coder</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String file_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;text.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PostConstruct</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        InputStream inputStream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassPathResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file_path).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] bytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[inputStream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">available</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> read </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputStream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bytes);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bytes));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><strong><code>@PostConstruct</code>注解标注的方法会在 Spring 为 Bean 初始化完成之后被调用，详情可见<a href="https://docs.spring.io/spring-framework/docs/5.3.26/reference/html/core.html#beans-postconstruct-and-predestroy-annotations" target="_blank" rel="noreferrer"><code>@PostConstruct</code></a></strong></p>`,13),p=[l];function r(h,o,k,c,d,g){return a(),i("div",null,p)}const b=s(t,[["render",r]]);export{u as __pageData,b as default};
