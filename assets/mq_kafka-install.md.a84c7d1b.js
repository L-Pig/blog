import{_ as a,o as e,c as o,V as t}from"./chunks/framework.2956d6af.js";const _=JSON.parse('{"title":"Kafka安装、部署、测试","description":"","frontmatter":{},"headers":[],"relativePath":"mq/kafka-install.md","filePath":"mq/kafka-install.md","lastUpdated":1686500671000}'),r={name:"mq/kafka-install.md"},i=t('<h1 id="kafka安装、部署、测试" tabindex="-1">Kafka安装、部署、测试 <a class="header-anchor" href="#kafka安装、部署、测试" aria-label="Permalink to &quot;Kafka安装、部署、测试&quot;">​</a></h1><h2 id="下载" tabindex="-1">下载 <a class="header-anchor" href="#下载" aria-label="Permalink to &quot;下载&quot;">​</a></h2><p><a href="https://archive.apache.org/dist/kafka/" target="_blank" rel="noreferrer">Kafka下载</a></p><p>  自行选择版本,本文以3.2.0版本为例，且不使用zookeeper，前面的2.12以及2.13表示scala的版本，后面的3.2.0表示kafka的版本</p><h2 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署" aria-label="Permalink to &quot;部署&quot;">​</a></h2><ul><li><p><strong>解压下载下来的压缩包</strong></p><p><code>tar -zxvf kafka_2.12-3.2.0.tgz</code></p></li></ul><details><summary> 如果使用zookeeper进行服务管理，则可跳过这段</summary><ol><li>使用<code>kafka-storage</code>脚本为集群生成一个id，这个id将在同一个集群中所有实例使用 <code>./bin/kafka-storage.sh random-uuid</code></li><li>格式化存储目录 <strong>（注意：如果使用kraft做服务管理的话就要使用config目录下的kraft目录下的<code>server.properties</code>配置文件）</strong><code>./bin/kafka-storage.sh format -t &lt;uuid&gt; -c ./config/kraft/server.properties</code></li><li>如果有多实例，则需要都操作一遍步骤1和步骤2，可自行编写脚本进行处理</li></ol></details><ul><li><strong>启动KafkaServer,<code>-daemon</code> 表示在后台启动，不加此参数KafkaServer将在控制台关闭的时候停止</strong><code>bin/kafka-server-start.sh &lt;-daemon&gt; config/kraft/server.properties</code></li></ul><h2 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h2><ol><li>创建一个topic（下面指令将创建一个 topic 名称为 <code>foo</code>，分区数(<code>partitions</code>)为1，副本数(<code>replication-factor</code>)为2） <code>bin/kafka-topics.sh --create --topic foo --partitions 1 --replication-factor 2 --bootstrap-server ip:port</code></li><li>启动消息消费者，用于测试消息是否能成功接收（通过下面的指令启动的控制台消费者将监听topic名称为 <code>foo</code>的主题） <code>bin/kafka-console-consumer.sh --bootstrap-server ip:port --topic foo</code></li><li>启动消息生产者，配合消息消费者测试消息是否能成功发送（通过下面的指令启动的控制台生产者将向topic名称为 <code>foo</code>的主题发送消息） <code>bin/kafka-console-producer.sh --bootstrap-server ip:port --topic foo</code></li></ol>',10),c=[i];function s(l,d,n,f,p,k){return e(),o("div",null,c)}const m=a(r,[["render",s]]);export{_ as __pageData,m as default};
