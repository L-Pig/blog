import{_ as e,D as s,o as n,c as t,I as o,w as l,R as a,a as r}from"./chunks/framework.Bs_Q0j17.js";const v=JSON.parse('{"title":"Golang 面试题","description":"","frontmatter":{},"headers":[],"relativePath":"go/interview-questions.md","filePath":"go/interview-questions.md","lastUpdated":1703841519000}'),h={name:"go/interview-questions.md"},p=a('<h1 id="golang-面试题" tabindex="-1">Golang 面试题 <a class="header-anchor" href="#golang-面试题" aria-label="Permalink to &quot;Golang 面试题&quot;">​</a></h1><h2 id="go基础类" tabindex="-1">Go基础类 <a class="header-anchor" href="#go基础类" aria-label="Permalink to &quot;Go基础类&quot;">​</a></h2><h3 id="_1、与其他语言相比-使用-go-有什么好处" tabindex="-1">1、与其他语言相比，使用 Go 有什么好处? <a class="header-anchor" href="#_1、与其他语言相比-使用-go-有什么好处" aria-label="Permalink to &quot;1、与其他语言相比，使用 Go 有什么好处?&quot;">​</a></h3><ul><li>与其他作为学术实验开始的语言不同，Go 代码的设计是<code>务实</code>的。每个功能和语法决策都旨在让程序员的生活更轻松。</li><li>Golang 针对<code>并发</code>进行了优化，并且在规模上运行良好。</li><li>由于单一的标准代码格式，Golang 通常被认为比其他语言更具可读性。</li><li>自动垃圾收集明显比 Java 或 Python 更有效，因为它与程序<code>同时执行</code>。</li></ul><h3 id="_2、golang-使用什么数据类型" tabindex="-1">2、Golang 使用什么数据类型? <a class="header-anchor" href="#_2、golang-使用什么数据类型" aria-label="Permalink to &quot;2、Golang 使用什么数据类型?&quot;">​</a></h3>',5),d=a(`<h3 id="_3、go-程序中的包是什么" tabindex="-1">3、Go 程序中的包是什么? <a class="header-anchor" href="#_3、go-程序中的包是什么" aria-label="Permalink to &quot;3、Go 程序中的包是什么?&quot;">​</a></h3><p>  包 (pkg) 是 Go 工作区中包含 Go 源文件或其他包的目录。源文件中的每个函数、 变量和类型都存储在链接包中。每个 Go 源文件都属于一个包，该包在文件顶 部使用以下命令声明：</p><div class="language-Go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;packagename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>  您可以使用以下方法导入和导出包以重用导出的函数或类型：</p><div class="language-Go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;packagename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>  Golang 的标准包是<code>fmt</code>，其中包含格式化和打印功能，如 <code>Println()</code></p><h3 id="_4、go-支持什么形式的类型转换-将整数转换为浮点数。" tabindex="-1">4、Go 支持什么形式的类型转换? 将整数转换为浮点数。 <a class="header-anchor" href="#_4、go-支持什么形式的类型转换-将整数转换为浮点数。" aria-label="Permalink to &quot;4、Go 支持什么形式的类型转换? 将整数转换为浮点数。&quot;">​</a></h3><p>  Go 支持显式类型转换以满足其严格的类型要求。</p><div class="language-Go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 55</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//转换为float64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_5、什么是-goroutine-你如何停止它" tabindex="-1">5、什么是 Goroutine？你如何停止它? <a class="header-anchor" href="#_5、什么是-goroutine-你如何停止它" aria-label="Permalink to &quot;5、什么是 Goroutine？你如何停止它?&quot;">​</a></h3><p>一个 Goroutine 是一个函数或方法执行同时旁边其他任何够程采用了特殊的 Goroutine 线程。Goroutine 线程比标准线程更轻量级，大多数 Golang 程 序 同时使 用数千个 Goroutine。</p>`,11);function c(g,k,u,_,m,b){const i=s("font");return n(),t("div",null,[p,o(i,{color:"LightCoral"},{default:l(()=>[r("  Method、Bool、String、Array、Slice、Struct、Pointer、Function、Interface、Map、Channel")]),_:1}),d])}const y=e(h,[["render",c]]);export{v as __pageData,y as default};
